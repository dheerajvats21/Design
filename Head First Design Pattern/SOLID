Bob martin - https://www.youtube.com/watch?v=TMuno5RZNeE&t=3127s
Why does code fail ?
 1. Rigidity - to change some thing you need to change lot more (on change and 
many things compile i.e higher level modules)
 2. Fragility - change at one point creates problems of unrelated parts.
Common to them - coupling
Bulk of software design is managing dependencies
Polymorphism - one variable can hold multiple types of things (functions in c, objects etc) - 
What does polymorphism do - At compile type it reverses the control. Now low level modules depends
on interface rather than high level modules. Which earlier use to import the lower level modules,
but now imports interface. So gives ability of one module calling another and yet have compile time dependency
point against the flow of control.

With polimorphism , you can have absolute control over dependency structure. You can decide in which 
direction dependency arrow should point. This is what OO is . OO is about managing dependencies by selectively
inverting key dependencies in your architecture to prevent rigity , fragility, non reusability.

OCP - watch okhravi
SRP - watch okhravi
Liscovs - watch okhravi
INteface segregation - okhravi
Dep INversion - https://www.youtube.com/watch?v=_CQuOfIqaGE&t=1s and https://www.youtube.com/watch?v=S9awxA1wNNY


Keep an eye on what recompiles when a thing changes. only things that make sense should recompile.

1. Single Responsibility - One reason to change Like CEO, CFO, CTO triggered changes shouldnt be in same class as 
they can interfere with each other- bob matrin  and  concept and coding
2. Open Close- Open for extention closed for modification. do not change/modify a class , extend it. 
You can only decouple according to what you know. but when you give to customer, new dimensions of chagnes 
come for which you have not decoupled, So its a good idea to give code to customer to use ASAP and then know 
the axis of changes for customer and then accordingly decouple them for changes for OCP.
Mostly when this is not followed there are somewhere addition of code in switch statements on addition of class. 
3. Liscovs Substitution principle - Derived classes MUST be usable through baseclass interface without the need
for user to know the difference (i.e wherever there is base class used in programs it should be swappable 
with subtype WITHOUT CAUSING ANY UNWANTED BEHAVIOR IN PROGRAM) . 

This Consists of 3 type rules, 4 behavioral rules around pre condition postondition, single state and
multi state invacriants 
Robustness principle - be liberal in what you accept but coonservative in what you give.

In code there should not be instanceof to have multiple behaviors. As this means user knows the difference.
E.g When we inherit square from rectangle. when we change width side also changes, and this may cause problem 
in some code where rectangle is used. So Square cannot be extended from rectangle and in future the code has to
be change with if statement if (instanceof Square) . Which violates liscovs principle. As now user has to know 
the difference because basically the class which represents square does not have same relationship  with class 
which represent rectangle , as squares and rectangle in math have.
So be cautious here. Things which represent other things may not have same relation ship as the things itself.

4. Interface segregation principle - There should not be one
fat interface. We should segregate them into smaller ones. Such that the classes which implement them should have
all the functions implemented and not only some of them. Too many interfaces is better than too few. Rather
than having many methods in one interface we can make many smaller interface with each having its own
functionalities and make class implement those functionalities. E.g 
IAnimals { Eat(), Sleep(), move () } rather than this AnimalInterface we should make 3 interfaces for Eating,
Sleeping , moving . And make IAnimal implement those. As IAnimal with 3 methods is large monolithic animal. So we 
are facouring composition over inheritance and decouplin over coupling. (kinda like microservices , instead of 
monolith, we compose the applciation by creating many microservices). Now if other Species Like plants can
also implement Eat(), Sleep(). So small roles can be given to make large composition.
5. Dependency Inversion - 
Formal - High level modules should not depend on low level modules(concretions) both should depend on abstractions. 
Abstractions should not depend on details. Details should depend on abstractions
Whenever you see new keyword, We depending on a concreation. If no new keyword we are using 
abstractions and getting objects as inputs. Also dont make abstractions thinking of implementation. 
First create abstractions then implement them, So Implementation should depend on abstractions not vice versa
Lecture - https://youtu.be/zHiWqnTWsn4?si=okmoMS0o2gFgHo59


Intro to design patterns, Classification
1. Creational
    Singleton
    Factory Method
    Abstract Factory
    Builder - when class has multipal optional params AND needs immutability. gives immutability.
    Prototype

2. structural
    Adaptor
    Decorator - Useful in Stream(Input, Buffered Input Stream, lineInputStream),
                 Deprecating a class (Make decorator of the class and dont call the base component to depricate)
    Facade
    Proxy
    Bridge
    composite
    Flyweight
3. Behavioral
    Chain of responsibility
     Command
     Iterator
      Mediator
      Observer
     State
     Strategy
     Visitor
